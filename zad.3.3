import sys

class Graph:
    def __init__(self, vertices):
        self.vertices = vertices
        self.graph = [[0 for col in range(vertices)] for row in range(vertices)]

    def print_shortest_path(self, dist):
        print("Destination:     Shortest Path:")
        for node in range(self.vertices):
            print("     ",node, "               ", dist[node])

    def shortest_distance(self, dist, sptSet):

        min_dist = sys.maxsize
        for i in range(self.vertices):
            if dist[i] < min_dist and sptSet[i] == False:
                min_dist = dist[i]
                min_index = i

        return min_index

    def dijkstra(self, source):
        dist = [sys.maxsize]*self.vertices
        dist[source] = 0
        sptSet = [0]*self.vertices

        for i in range(self.vertices):
            x = self.shortest_distance(dist, sptSet)

            sptSet[x]=1

